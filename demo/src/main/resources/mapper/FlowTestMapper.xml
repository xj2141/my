<?xml version = "1.0" encoding = "UTF-8"?>
<!DOCTYPE mapper PUBLIC
        "-//mybatis.org//DTD com.example.Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.dao.FlowTestDao">

    <resultMap id="resultPre" type="com.example.demo.domain.TestPre">
        <id property="id" column="id" />
        <result property="username" column="username" />
        <result property="testDate" column="testDate" />
        <result property="beginId" column="beginId"/>
        <result property="endId" column="endId"/>
    </resultMap>

    <resultMap id="resultTest" type="com.example.demo.domain.Test">
        <id property="testId" column="testId" />
        <result property="testTime" column="testTime"/>
        <result property="testPlace" column="testPlace"/>
        <result property="vv" column="vv"/>
        <result property="qmax" column="qmax"/>
        <result property="qave" column="qave"/>
        <result property="ft" column="ft"/>
        <result property="tqmax" column="tqmax"/>
        <result property="flowBeginId" column="flowBeginId"/>
        <result property="flowEndId" column="flowEndId"/>
        <result property="conclusion" column="conclusion"/>
    </resultMap>

    <resultMap id="resultFlow" type="com.example.demo.domain.Flow">
        <id property="id" column="id" />
        <result property="rate" column="rate"/>
        <result property="time" column="time"/>
    </resultMap>

    <select id="getTestPre" resultMap="resultPre">
        select * from testPre
        where username=#{username} and testDate between #{firstDate} AND #{lastDate}
        order by testDate asc
    </select>

    <select id="getTestPreByDate" resultMap="resultPre" parameterType="String">
        select * from testPre
        where testDate=#{testDate} and username=#{username}
    </select>

    <insert id="insertTestPre" parameterType="com.example.demo.domain.TestPre">
        insert into testPre(username,testDate,beginId,endId)
        values (
        #{username,jdbcType=VARCHAR},
        #{testDate,jdbcType=VARCHAR},
        #{beginId,jdbcType=INTEGER},
        #{endId,jdbcType=INTEGER}
        )
    </insert>

    <delete id="removeTestPre">
        delete from testPre where username=#{username} and testDate in
        <foreach collection="dates" item="testDate" open="(" separator="," close=")">
            #{testDate}
        </foreach>
    </delete>

    <select id="getTest" resultMap="resultTest">
        select * from test
        where testId between #{beginId} AND #{endId}
    </select>

    <select id="getLastIdTest" resultType="Integer">
        select testId from test
        order by testId desc
        limit 0,1
    </select>

    <insert id="insertTest" parameterType="java.util.List">
        insert into test(testTime,testPlace,vv,qmax,qave,ft,tqmax,flowBeginId,flowEndId,conclusion)
        values
        <foreach collection="list"  item="item" index="index" separator=",">
            (
            #{item.testTime,jdbcType=VARCHAR},
            #{item.testPlace,jdbcType=VARCHAR},
            #{item.vv,jdbcType=VARCHAR},
            #{item.qmax,jdbcType=VARCHAR},
            #{item.qave,jdbcType=VARCHAR},
            #{item.ft,jdbcType=VARCHAR},
            #{item.tqmax,jdbcType=VARCHAR},
            #{item.flowBeginId,jdbcType=INTEGER},
            #{item.flowEndId,jdbcType=INTEGER},
            #{item.conclusion,jdbcType=VARCHAR}
            )
        </foreach>
    </insert>

    <delete id="removeTest">
        delete from test
        where testId between #{beginId} and #{endId}
    </delete>

    <select id="getFlow" resultMap="resultFlow">
        select * from flow
        where id between #{beginId} AND #{endId}
    </select>

    <insert id="insertFlow" parameterType="java.util.List">
        insert into flow(rate,time)
        values
        <foreach collection="list"  item="item" index="index" separator=",">
            (
            #{item.rate,jdbcType=VARCHAR},
            #{item.time,jdbcType=VARCHAR}
            )
        </foreach>
    </insert>

    <delete id="removeFlow">
        delete from flow
        where id between #{beginId} and #{endId}
    </delete>

    <select id="getLastIdFlow" resultType="Integer">
        select id from flow
        order by id desc
        limit 0,1
    </select>
</mapper>